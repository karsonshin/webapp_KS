library(knitr)
library(tidyverse)
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
library(knitr)
library(tidyverse)
OneMeanTInterval <- function(mean.x, s.x, n.x, conf.level = 0.95) {
CV <- abs(qt((1 - conf.level)/2,(n.x-1)))
SE <- s.x/sqrt(n.x)
Lower <- mean.x - (CV*SE)
Upper <- mean.x + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3), Upper = round(Upper,3))
return(out)
}
TwoMeansTInterval <- function(mean.x, s.x, n.x, mean.y,
s.y, n.y, conf.level = 0.95,
var.equal=FALSE) {
if (var.equal) {
df = n.x + n.y - 2} else {
df = ((s.x^2/n.x + s.y^2/n.y)^2)/
(((s.x^2/n.x)^2/(n.x)) +
((s.y^2/n.y)^2/(n.y-1)))
}
CV <- abs(qt((1 - conf.level)/2,df))
if (var.equal) {
sp <- sqrt((((n.x - 1)*s.x^2) + ((n.y - 1)*s.y^2))/df)
SE <- sp * sqrt((1/n.x)+(1/n.y)) } else
SE <- sqrt((s.x^2/n.x)+(s.y^2/n.y))
Lower <- (mean.x-mean.y) - (CV*SE)
Upper <- (mean.x-mean.y) + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3),
Upper = round(Upper,3),
df = round(df,2))
return(out)
}
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
Iris.df <- read_csv("Iris.csv")
Iris.df$Species <- as.factor(Iris.df$Species)
#
HE.df <- read_csv("HairEyeColor.csv")
HE.df$Sex <- as.factor(HE.df$Sex)
HE.df$Hair <- as.factor(HE.df$Hair)
HE.df$Eye <- as.factor(HE.df$Eye)
#
C.df <- read_csv("Cholesterol.csv")
C.df$Cereal <- as.factor(C.df$Cereal)
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
CV <- 0.05 / (mean_df / sd(Iris.df$Sepal.Length))
SE <- sd(Iris.df$Sepal.Length) / 50
ME <- SE / 2
(mean_df + 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
(mean_df - 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
# Here is the t.test call you need for checking
t.test(Iris.df$Sepal.Length, conf.level=0.95)$conf.int
library(knitr)
library(tidyverse)
OneMeanTInterval <- function(mean.x, s.x, n.x, conf.level = 0.95) {
CV <- abs(qt((1 - conf.level)/2,(n.x-1)))
SE <- s.x/sqrt(n.x)
Lower <- mean.x - (CV*SE)
Upper <- mean.x + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3), Upper = round(Upper,3))
return(out)
}
TwoMeansTInterval <- function(mean.x, s.x, n.x, mean.y,
s.y, n.y, conf.level = 0.95,
var.equal=FALSE) {
if (var.equal) {
df = n.x + n.y - 2} else {
df = ((s.x^2/n.x + s.y^2/n.y)^2)/
(((s.x^2/n.x)^2/(n.x)) +
((s.y^2/n.y)^2/(n.y-1)))
}
CV <- abs(qt((1 - conf.level)/2,df))
if (var.equal) {
sp <- sqrt((((n.x - 1)*s.x^2) + ((n.y - 1)*s.y^2))/df)
SE <- sp * sqrt((1/n.x)+(1/n.y)) } else
SE <- sqrt((s.x^2/n.x)+(s.y^2/n.y))
Lower <- (mean.x-mean.y) - (CV*SE)
Upper <- (mean.x-mean.y) + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3),
Upper = round(Upper,3),
df = round(df,2))
return(out)
}
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
Iris.df <- read_csv("Iris.csv")
Iris.df$Species <- as.factor(Iris.df$Species)
#
HE.df <- read_csv("HairEyeColor.csv")
HE.df$Sex <- as.factor(HE.df$Sex)
HE.df$Hair <- as.factor(HE.df$Hair)
HE.df$Eye <- as.factor(HE.df$Eye)
#
C.df <- read_csv("Cholesterol.csv")
C.df$Cereal <- as.factor(C.df$Cereal)
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
CV <- 0.05 / (mean_df / sd(Iris.df$Sepal.Length))
SE <- sd(Iris.df$Sepal.Length) / 50
ME <- SE / 2
(mean_df + 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
(mean_df - 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
# Here is the t.test call you need for checking
t.test(Iris.df$Sepal.Length, conf.level=0.95)$conf.int
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
CV <- 0.05 / (mean_df / sd(Iris.df$Sepal.Length))
SE <- sd(Iris.df$Sepal.Length) / 50
ME <- SE / 2
(mean_df + 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
(mean_df - 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
# Here is the t.test call you need for checking
t.test(Iris.df$Sepal.Length, conf.level=0.95)$conf.int
# ME = 0.1
# Z(a/2) = Z(.05/2) = 1.96
n <- ((1.96 * sd(Iris.df$Sepal.Length)) / 2) ^ 2
n
library(knitr)
library(tidyverse)
OneMeanTInterval <- function(mean.x, s.x, n.x, conf.level = 0.95) {
CV <- abs(qt((1 - conf.level)/2,(n.x-1)))
SE <- s.x/sqrt(n.x)
Lower <- mean.x - (CV*SE)
Upper <- mean.x + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3), Upper = round(Upper,3))
return(out)
}
TwoMeansTInterval <- function(mean.x, s.x, n.x, mean.y,
s.y, n.y, conf.level = 0.95,
var.equal=FALSE) {
if (var.equal) {
df = n.x + n.y - 2} else {
df = ((s.x^2/n.x + s.y^2/n.y)^2)/
(((s.x^2/n.x)^2/(n.x)) +
((s.y^2/n.y)^2/(n.y-1)))
}
CV <- abs(qt((1 - conf.level)/2,df))
if (var.equal) {
sp <- sqrt((((n.x - 1)*s.x^2) + ((n.y - 1)*s.y^2))/df)
SE <- sp * sqrt((1/n.x)+(1/n.y)) } else
SE <- sqrt((s.x^2/n.x)+(s.y^2/n.y))
Lower <- (mean.x-mean.y) - (CV*SE)
Upper <- (mean.x-mean.y) + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3),
Upper = round(Upper,3),
df = round(df,2))
return(out)
}
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
CV <- 0.05 / (mean_df / sd(Iris.df$Sepal.Length))
SE <- sd(Iris.df$Sepal.Length) / 50
ME <- SE / 2
(mean_df + 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
(mean_df - 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
# Here is the t.test call you need for checking
t.test(Iris.df$Sepal.Length, conf.level=0.95)$conf.int
# ME = 0.1
# Z(a/2) = Z(.05/2) = 1.96
n <- ((1.96 * sd(Iris.df$Sepal.Length)) / 2) ^ 2
n
# Create the right subsets of data
Iris.S <- filter(Iris.df, Species == "setosa")
Iris.V <- filter(Iris.df, Species == "versicolor")
# add code for "by-hand" CI
(mean(Iris.V$Sepal.Length) - mean(Iris.S$Sepal.Length))  +
1.96 * sqrt((sd(Iris.S$Sepal.Length)^2 / 50) +
(sd(Iris.V$Sepal.Length)^2 / 50))
(mean(Iris.V$Sepal.Length) - mean(Iris.S$Sepal.Length))  -
1.96 * sqrt((sd(Iris.S$Sepal.Length)^2 / 50) +
(sd(Iris.V$Sepal.Length)^2 / 50))
# call to t.test to check your results
t.test(Iris.V$Sepal.Length, Iris.S$Sepal.Length)$conf.int
var(Iris.V$Sepal.Length)^2 / var(Iris.S$Sepal.Length)^2
# get counts for Hair variable
(tab <- table(HE.df$Hair))
# add code to calculate CI
PE <- nrow(filter(HE.df, Hair == "Brown")) / nrow(HE.df)
Q <- 1 - PE
SE_PE <- sqrt((PE * Q) / nrow(HE.df))
HE_ME <- 1.96 * (SE_PE)
(PE + HE_ME)
(PE - HE_ME)
# call to binom.test to check your answers
binom.test(tab[3], sum(tab), conf.level=0.90)$conf.int
(1.96)^2 * (Q *(1-Q)) / (0.02^2)
# get contingency table of counts
(tab2 <- table(HE.df$Hair, HE.df$Eye))
# add code for "by-hand" CI
P_BLUE <- nrow(filter(HE.df, Eye == "Blue")) / nrow(HE.df)
P_BROND <- (nrow(filter(HE.df, Hair == "Brown")) + nrow(filter(HE.df, Hair == "Blond"))) / nrow(HE.df)
PE_VS <- P_BROND - P_BLUE
SE_VS <- sqrt( ((P_BLUE * (1 - P_BLUE)) / nrow(HE.df)) + ((P_BROND * (1 - P_BROND)) / nrow(HE.df)) )
ME_VS <- 1.96 * (SE_VS)
(PE_VS + ME_VS)
(PE_VS - ME_VS)
# call to prop.test to check your answers
prop.test(c(tab2[2,1],tab2[3,1]), c(sum(tab2[2,]), sum(tab2[3,])),
correct=FALSE, conf.level = 0.9)$conf.int
# Create the right subsets of data
C.C <- filter(C.df, Cereal == "Cornflk")
C.O <- filter(C.df, Cereal == "OatBran")
# add code to calculate CI by-hand
(mean(C.C$Cholesterol) - mean(C.O$Cholesterol))  +
2.326 * sqrt((sd(C.O$Cholesterol)^2 / 24) +
(sd(C.C$Cholesterol)^2 / 24))
(mean(C.C$Cholesterol) - mean(C.O$Cholesterol))  -
2.326 * sqrt((sd(C.O$Cholesterol)^2 / 24) +
(sd(C.C$Cholesterol)^2 / 24))
# copy and paste the t.test call from Problem 3
# modify as necessary for this CI
t.test(C.C$Cholesterol, C.O$Cholesterol)$conf.int
# fill out this skeleton code to set variables
# you need to keep the object names as is
# so the custom function call at the end works
mean.x <- 22.5
sd.x <- 3.77
n.x <- 18
mean.y <- 25.2
sd.y <- 3.85
n.y <- 25
# add code to finish the by-hand calculation
df_xy <- ( ((sd.x^2 / n.x) + (sd.y^2 / n.y))^2 /
((1/(n.x-1)) * (sd.x^2 / n.x)^2) + ((1/(n.y-1)) * (sd.y^2 / n.y)^2) )
t_val <- 2.6737
(mean.x - mean.y) + ((t_val) * sqrt(((sd.x)^2 / n.x) + ((sd.y)^2 / n.y)))
(mean.x - mean.y) - ((t_val) * sqrt(((sd.x)^2 / n.x) + ((sd.y)^2 / n.y)))
# call to custom function to check your results
TwoMeansTInterval(mean.x, sd.x, n.x, mean.y, sd.y, n.y,
var.equal = TRUE, conf.level = 0.99)
knitr::opts_chunk$set(error = TRUE)
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
CV <- 0.05 / (mean_df / sd(Iris.df$Sepal.Length))
SE <- sd(Iris.df$Sepal.Length) / 50
ME <- SE / 2
(mean_df + 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
(mean_df - 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
# Here is the t.test call you need for checking
t.test(Iris.df$Sepal.Length, conf.level=0.95)$conf.int
library(knitr)
library(tidyverse)
library("knitr")
knit2html("file")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
library(tidyverse)
library("knitr")
knit2html("file")
library(knitr)
library(tidyverse)
library("knitr")
knit2html("file")
library(knitr)
library(tidyverse)
Iris.df <- read_csv("Iris.csv")
Iris.df$Species <- as.factor(Iris.df$Species)
#
HE.df <- read_csv("HairEyeColor.csv")
HE.df$Sex <- as.factor(HE.df$Sex)
HE.df$Hair <- as.factor(HE.df$Hair)
HE.df$Eye <- as.factor(HE.df$Eye)
#
C.df <- read_csv("Cholesterol.csv")
C.df$Cereal <- as.factor(C.df$Cereal)
library(knitr)
library(tidyverse)
Iris.df <- read_csv("Iris.csv")
Iris.df$Species <- as.factor(Iris.df$Species)
#
HE.df <- read_csv("HairEyeColor.csv")
HE.df$Sex <- as.factor(HE.df$Sex)
HE.df$Hair <- as.factor(HE.df$Hair)
HE.df$Eye <- as.factor(HE.df$Eye)
#
C.df <- read_csv("Cholesterol.csv")
C.df$Cereal <- as.factor(C.df$Cereal)
OneMeanTInterval <- function(mean.x, s.x, n.x, conf.level = 0.95) {
CV <- abs(qt((1 - conf.level)/2,(n.x-1)))
SE <- s.x/sqrt(n.x)
Lower <- mean.x - (CV*SE)
Upper <- mean.x + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3), Upper = round(Upper,3))
return(out)
}
TwoMeansTInterval <- function(mean.x, s.x, n.x, mean.y,
s.y, n.y, conf.level = 0.95,
var.equal=FALSE) {
if (var.equal) {
df = n.x + n.y - 2} else {
df = ((s.x^2/n.x + s.y^2/n.y)^2)/
(((s.x^2/n.x)^2/(n.x)) +
((s.y^2/n.y)^2/(n.y-1)))
}
CV <- abs(qt((1 - conf.level)/2,df))
if (var.equal) {
sp <- sqrt((((n.x - 1)*s.x^2) + ((n.y - 1)*s.y^2))/df)
SE <- sp * sqrt((1/n.x)+(1/n.y)) } else
SE <- sqrt((s.x^2/n.x)+(s.y^2/n.y))
Lower <- (mean.x-mean.y) - (CV*SE)
Upper <- (mean.x-mean.y) + (CV*SE)
Title <- paste(conf.level*100, "% CI", sep="")
out <- cbind(Title, Lower = round(Lower,3),
Upper = round(Upper,3),
df = round(df,2))
return(out)
}
# Add by-hand calculations; make sure to print
# intermediate results
mean_df <- mean(Iris.df$Sepal.Length)
CV <- 0.05 / (mean_df / sd(Iris.df$Sepal.Length))
SE <- sd(Iris.df$Sepal.Length) / 50
ME <- SE / 2
(mean_df + 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
(mean_df - 0.95 * (sd(Iris.df$Sepal.Length) / sqrt(150)))
# Here is the t.test call you need for checking
t.test(Iris.df$Sepal.Length, conf.level=0.95)$conf.int
# ME = 0.1
# Z(a/2) = Z(.05/2) = 1.96
n <- ((1.96 * sd(Iris.df$Sepal.Length)) / 2) ^ 2
n
# Create the right subsets of data
Iris.S <- filter(Iris.df, Species == "setosa")
Iris.V <- filter(Iris.df, Species == "versicolor")
# add code for "by-hand" CI
(mean(Iris.V$Sepal.Length) - mean(Iris.S$Sepal.Length))  +
1.96 * sqrt((sd(Iris.S$Sepal.Length)^2 / 50) +
(sd(Iris.V$Sepal.Length)^2 / 50))
(mean(Iris.V$Sepal.Length) - mean(Iris.S$Sepal.Length))  -
1.96 * sqrt((sd(Iris.S$Sepal.Length)^2 / 50) +
(sd(Iris.V$Sepal.Length)^2 / 50))
# call to t.test to check your results
t.test(Iris.V$Sepal.Length, Iris.S$Sepal.Length)$conf.int
var(Iris.V$Sepal.Length)^2 / var(Iris.S$Sepal.Length)^2
# get counts for Hair variable
(tab <- table(HE.df$Hair))
# add code to calculate CI
PE <- nrow(filter(HE.df, Hair == "Brown")) / nrow(HE.df)
Q <- 1 - PE
SE_PE <- sqrt((PE * Q) / nrow(HE.df))
HE_ME <- 1.96 * (SE_PE)
(PE + HE_ME)
(PE - HE_ME)
# call to binom.test to check your answers
binom.test(tab[3], sum(tab), conf.level=0.90)$conf.int
(1.96)^2 * (Q *(1-Q)) / (0.02^2)
# get contingency table of counts
(tab2 <- table(HE.df$Hair, HE.df$Eye))
# add code for "by-hand" CI
P_BLUE <- nrow(filter(HE.df, Eye == "Blue")) / nrow(HE.df)
P_BROND <- (nrow(filter(HE.df, Hair == "Brown")) + nrow(filter(HE.df, Hair == "Blond"))) / nrow(HE.df)
PE_VS <- P_BROND - P_BLUE
SE_VS <- sqrt( ((P_BLUE * (1 - P_BLUE)) / nrow(HE.df)) + ((P_BROND * (1 - P_BROND)) / nrow(HE.df)) )
ME_VS <- 1.96 * (SE_VS)
(PE_VS + ME_VS)
(PE_VS - ME_VS)
# call to prop.test to check your answers
prop.test(c(tab2[2,1],tab2[3,1]), c(sum(tab2[2,]), sum(tab2[3,])),
correct=FALSE, conf.level = 0.9)$conf.int
# Create the right subsets of data
C.C <- filter(C.df, Cereal == "Cornflk")
C.O <- filter(C.df, Cereal == "OatBran")
# add code to calculate CI by-hand
(mean(C.C$Cholesterol) - mean(C.O$Cholesterol))  +
2.326 * sqrt((sd(C.O$Cholesterol)^2 / 24) +
(sd(C.C$Cholesterol)^2 / 24))
(mean(C.C$Cholesterol) - mean(C.O$Cholesterol))  -
2.326 * sqrt((sd(C.O$Cholesterol)^2 / 24) +
(sd(C.C$Cholesterol)^2 / 24))
# copy and paste the t.test call from Problem 3
# modify as necessary for this CI
t.test(C.C$Cholesterol, C.O$Cholesterol)$conf.int
# fill out this skeleton code to set variables
# you need to keep the object names as is
# so the custom function call at the end works
mean.x <- 22.5
sd.x <- 3.77
n.x <- 18
mean.y <- 25.2
sd.y <- 3.85
n.y <- 25
# add code to finish the by-hand calculation
df_xy <- ( ((sd.x^2 / n.x) + (sd.y^2 / n.y))^2 /
((1/(n.x-1)) * (sd.x^2 / n.x)^2) + ((1/(n.y-1)) * (sd.y^2 / n.y)^2) )
t_val <- 2.6737
(mean.x - mean.y) + ((t_val) * sqrt(((sd.x)^2 / n.x) + ((sd.y)^2 / n.y)))
(mean.x - mean.y) - ((t_val) * sqrt(((sd.x)^2 / n.x) + ((sd.y)^2 / n.y)))
# call to custom function to check your results
TwoMeansTInterval(mean.x, sd.x, n.x, mean.y, sd.y, n.y,
var.equal = TRUE, conf.level = 0.99)
shiny::runApp('D:/UofWa/INFO 201/webapp_KS/webapp_ks')
runApp('D:/UofWa/INFO 201/webapp_KS/webapp_ks')
setwd("D:/UofWa/INFO 201/webapp_KS/webapp_ks")
runApp()
